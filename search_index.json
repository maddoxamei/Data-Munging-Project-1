[["preface.html", "College Scorecard Report Preface", " College Scorecard Report Mei Maddox, Mitchelle V., Conor Welsh Last Compiled on Oct 20 2021 Preface This project was completed in accordance with the requirements for the Applied Data Science course in the Data Science Masters program at New College of Florida. "],["introduction.html", "Introduction 0.1 The Dataset 0.2 The project", " Introduction 0.1 The Dataset 0.2 The project "],["data-acquisition.html", "1 Data Acquisition 1.1 Initial Acquisition 1.2 Continual Aquisition", " 1 Data Acquisition 1.1 Initial Acquisition As opposed to downloading large csv datasets, we decided to use rscorcard to retrieve only the relevant information. rscorecard is a R wrapper for U.S. Department of Education College Scorecard Data API which allows for the remotly access and download the Department of Education’s College Scorecard data. It is based on the ‘dplyr’ model of piped commands to select and filter data in a single chained function call. This package can installed in RStudio by running the command install.packages(\"rscorecard\") in the console. Merely loading the package is not enough to use its functions. In order to communicate with the server which hosts the data, an API key from the U.S. Department of Education is required. This key acts as an authentication tool. rscorecard::sc_key(APIKey) Our group was interested in the relationship between tuition cost and earnings after graduation across different academic fields. Although there were fields which recorded the proportion of degrees recieved in specific fields, these fields were not well standardized (i.e. “Engineering” vs. “Engineering or related fields”). Therefore, we decided to use school type instead. Table ?? provides a list of the school types as classified by the Carnegie method that we included in our dataset. The specific earnings and tuition variables we considered are located in Table 1.1. Table 1.1: Specific earnings and tuition variables considered in our analysis. Data is obtained through a series of piped functions: sc_init(), sc_filter(), sc_select(), sc_year(), and sc_get(). Unfortunately, the sc_year() function can only take a single-year entry. To simplify the process of grabbing the same data over the course of several years, a simple function was created. get.data &lt;- function(year, vars.vector){ print(paste(&quot;Grabbing data for&quot;,year)) rscorecard::sc_init() %&gt;% rscorecard::sc_filter(ccbasic %in% c(24:32)) %&gt;% rscorecard::sc_select_(vars.vector) %&gt;% rscorecard::sc_year(year) %&gt;% rscorecard::sc_get() } As mentioned earlier, the data collection began back in the 1900’s. As it turns out, the variables of interest to our group, earnings later in life and tuition, were not recorded until 2000. Therefore, the earlier years are excluded from our analysis. years &lt;- c(2000:as.numeric(format(Sys.Date(), &quot;%Y&quot;))) csb.data &lt;- dplyr::bind_rows( lapply(years, get.data, vars_to_pull) ) 1.2 Continual Aquisition The server which hosts the college data only allows up to 100 calls at a given time. Due to the use of Github Actions to automatically re-render the report after any changes pushed to the main branch, this access limitation makes it impractical for long-term data sourcing. Therefore, the compiled data was converted into a csv file and stored remotely in Google’s cloud service (Google Drive) to facilitate unrestricted access to the data. write.csv(csb.data, &quot;CollegeScorecardData20to21.csv&quot;, row.names=F) The data stored on Google Drive can henceforth be obtained through a download using the id of the file and the following Google address to access it. id &lt;- &quot;1Sfa6V3vhxQU3wDMTKsPUpnkp9DX8gsOK&quot; csb.data &lt;- read.csv(sprintf(&quot;https://docs.google.com/uc?id=%s&amp;export=download&quot;, id)) "],["data-quality.html", "2 Data Quality", " 2 Data Quality "],["data-preprocessing.html", "3 Data Preprocessing", " 3 Data Preprocessing The raw data we are working with has 18194 rows and 29 columns. A sample of this data is provided below in table 3.1. Table 3.1: Sample Data. Notice that the columns for the earnings table places the year subsets in the order of 10, 6 then 8. To ensure this ordering is not reflected in the later graphs, the column are renamed and then sorted alphebetically. Originally, the ccbasic (school type) column is an integer. Although the values are integers, they represent categories. Therefore, they must be converted into factors. Factors are R’s equivalent categorical variables. They are treated differently than normal characters. On that note, the unitid is also changed so that the id is treated as an object an not a descrete value. The original data types and altered types of the columns can be found in table 3.2. Table 3.2: Feature Types. "],["descriptive-statistics.html", "4 Descriptive Statistics 4.1 School Type 4.2 Earnings Variable 4.3 Cost Variable 4.4 Relationship Between Earnings and Cost", " 4 Descriptive Statistics 4.1 School Type The number of schools for each category Figure ?? 4.2 Earnings Variable 4.3 Cost Variable 4.4 Relationship Between Earnings and Cost "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
